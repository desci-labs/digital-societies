/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MetadataHolderInterface extends utils.Interface {
  functions: {
    "addSociety(address,string)": FunctionFragment;
    "attestations(bytes32)": FunctionFragment;
    "factoryAddress()": FunctionFragment;
    "isValidAttestation(address,uint256)": FunctionFragment;
    "isValidSociety(address)": FunctionFragment;
    "issueAttestation(uint256,uint256,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeToken(uint256,uint256,address,address)": FunctionFragment;
    "setFactoryAddress(address)": FunctionFragment;
    "societies(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdmin(address)": FunctionFragment;
    "updateAttestation(uint256,string)": FunctionFragment;
    "updateDelegate(uint256)": FunctionFragment;
    "updateSociety(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSociety"
      | "attestations"
      | "factoryAddress"
      | "isValidAttestation"
      | "isValidSociety"
      | "issueAttestation"
      | "owner"
      | "renounceOwnership"
      | "revokeToken"
      | "setFactoryAddress"
      | "societies"
      | "supportsInterface"
      | "transferOwnership"
      | "updateAdmin"
      | "updateAttestation"
      | "updateDelegate"
      | "updateSociety"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSociety",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAttestation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSociety",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueAttestation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "societies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttestation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSociety",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addSociety", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSociety",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "societies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSociety",
    data: BytesLike
  ): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "AttestationUpdated(address,uint256,string)": EventFragment;
    "DelegatesUpdated(address,uint256)": EventFragment;
    "Issued(address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Revoked(uint256,uint256,address,address)": EventFragment;
    "SocietyUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttestationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SocietyUpdated"): EventFragment;
}

export interface AdminUpdatedEventObject {
  society: string;
  admin: string;
}
export type AdminUpdatedEvent = TypedEvent<
  [string, string],
  AdminUpdatedEventObject
>;

export type AdminUpdatedEventFilter = TypedEventFilter<AdminUpdatedEvent>;

export interface AttestationUpdatedEventObject {
  society: string;
  attestationId: BigNumber;
  uri: string;
}
export type AttestationUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  AttestationUpdatedEventObject
>;

export type AttestationUpdatedEventFilter =
  TypedEventFilter<AttestationUpdatedEvent>;

export interface DelegatesUpdatedEventObject {
  society: string;
  attestationId: BigNumber;
}
export type DelegatesUpdatedEvent = TypedEvent<
  [string, BigNumber],
  DelegatesUpdatedEventObject
>;

export type DelegatesUpdatedEventFilter =
  TypedEventFilter<DelegatesUpdatedEvent>;

export interface IssuedEventObject {
  society: string;
  recipient: string;
  issuedBy: string;
  attestationId: BigNumber;
  tokenId: BigNumber;
}
export type IssuedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  IssuedEventObject
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevokedEventObject {
  tokenId: BigNumber;
  attestationId: BigNumber;
  revokedBy: string;
  _owner: string;
}
export type RevokedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface SocietyUpdatedEventObject {
  society: string;
  uri: string;
}
export type SocietyUpdatedEvent = TypedEvent<
  [string, string],
  SocietyUpdatedEventObject
>;

export type SocietyUpdatedEventFilter = TypedEventFilter<SocietyUpdatedEvent>;

export interface MetadataHolder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetadataHolderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSociety(
      society: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    factoryAddress(overrides?: CallOverrides): Promise<[string]>;

    isValidAttestation(
      society: PromiseOrValue<string>,
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSociety(
      society: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      issuedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeToken(
      tokenId: PromiseOrValue<BigNumberish>,
      attestationId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      revokedby: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactoryAddress(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    societies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelegate(
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSociety(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSociety(
    society: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attestations(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  factoryAddress(overrides?: CallOverrides): Promise<string>;

  isValidAttestation(
    society: PromiseOrValue<string>,
    attestationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSociety(
    society: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueAttestation(
    attestationId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    issuedBy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeToken(
    tokenId: PromiseOrValue<BigNumberish>,
    attestationId: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    revokedby: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactoryAddress(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  societies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAttestation(
    attestationId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelegate(
    attestationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSociety(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSociety(
      society: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    attestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factoryAddress(overrides?: CallOverrides): Promise<string>;

    isValidAttestation(
      society: PromiseOrValue<string>,
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSociety(
      society: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      issuedBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeToken(
      tokenId: PromiseOrValue<BigNumberish>,
      attestationId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      revokedby: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactoryAddress(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    societies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdmin(
      admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDelegate(
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSociety(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminUpdated(address,address)"(
      society?: null,
      admin?: null
    ): AdminUpdatedEventFilter;
    AdminUpdated(society?: null, admin?: null): AdminUpdatedEventFilter;

    "AttestationUpdated(address,uint256,string)"(
      society?: null,
      attestationId?: null,
      uri?: null
    ): AttestationUpdatedEventFilter;
    AttestationUpdated(
      society?: null,
      attestationId?: null,
      uri?: null
    ): AttestationUpdatedEventFilter;

    "DelegatesUpdated(address,uint256)"(
      society?: null,
      attestationId?: null
    ): DelegatesUpdatedEventFilter;
    DelegatesUpdated(
      society?: null,
      attestationId?: null
    ): DelegatesUpdatedEventFilter;

    "Issued(address,address,address,uint256,uint256)"(
      society?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      issuedBy?: PromiseOrValue<string> | null,
      attestationId?: null,
      tokenId?: null
    ): IssuedEventFilter;
    Issued(
      society?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      issuedBy?: PromiseOrValue<string> | null,
      attestationId?: null,
      tokenId?: null
    ): IssuedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Revoked(uint256,uint256,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      attestationId?: PromiseOrValue<BigNumberish> | null,
      revokedBy?: PromiseOrValue<string> | null,
      _owner?: null
    ): RevokedEventFilter;
    Revoked(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      attestationId?: PromiseOrValue<BigNumberish> | null,
      revokedBy?: PromiseOrValue<string> | null,
      _owner?: null
    ): RevokedEventFilter;

    "SocietyUpdated(address,string)"(
      society?: null,
      uri?: null
    ): SocietyUpdatedEventFilter;
    SocietyUpdated(society?: null, uri?: null): SocietyUpdatedEventFilter;
  };

  estimateGas: {
    addSociety(
      society: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isValidAttestation(
      society: PromiseOrValue<string>,
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSociety(
      society: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      issuedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeToken(
      tokenId: PromiseOrValue<BigNumberish>,
      attestationId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      revokedby: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactoryAddress(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    societies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelegate(
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSociety(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSociety(
      society: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidAttestation(
      society: PromiseOrValue<string>,
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSociety(
      society: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      issuedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeToken(
      tokenId: PromiseOrValue<BigNumberish>,
      attestationId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      revokedby: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryAddress(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    societies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAttestation(
      attestationId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelegate(
      attestationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSociety(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
