// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Society extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Society entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Society must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Society", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Society | null {
    return changetype<Society | null>(store.get("Society", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get admin(): Bytes | null {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set admin(value: Bytes | null) {
    if (!value) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromBytes(<Bytes>value));
    }
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value!.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    return value!.toString();
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get delegateRoleId(): i32 {
    let value = this.get("delegateRoleId");
    return value!.toI32();
  }

  set delegateRoleId(value: i32) {
    this.set("delegateRoleId", Value.fromI32(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get attestations(): Array<Bytes> {
    let value = this.get("attestations");
    return value!.toBytesArray();
  }

  set attestations(value: Array<Bytes>) {
    this.set("attestations", Value.fromBytesArray(value));
  }
}

export class Attestation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Attestation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Attestation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Attestation", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Attestation | null {
    return changetype<Attestation | null>(
      store.get("Attestation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get attestationId(): i32 {
    let value = this.get("attestationId");
    return value!.toI32();
  }

  set attestationId(value: i32) {
    this.set("attestationId", Value.fromI32(value));
  }

  get society(): Bytes {
    let value = this.get("society");
    return value!.toBytes();
  }

  set society(value: Bytes) {
    this.set("society", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    return value!.toString();
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get recipients(): Array<string> {
    let value = this.get("recipients");
    return value!.toStringArray();
  }

  set recipients(value: Array<string>) {
    this.set("recipients", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get issuedBy(): Bytes {
    let value = this.get("issuedBy");
    return value!.toBytes();
  }

  set issuedBy(value: Bytes) {
    this.set("issuedBy", Value.fromBytes(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get revokedBy(): Bytes | null {
    let value = this.get("revokedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revokedBy(value: Bytes | null) {
    if (!value) {
      this.unset("revokedBy");
    } else {
      this.set("revokedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get revokedAt(): BigInt | null {
    let value = this.get("revokedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set revokedAt(value: BigInt | null) {
    if (!value) {
      this.unset("revokedAt");
    } else {
      this.set("revokedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get issuedAt(): BigInt {
    let value = this.get("issuedAt");
    return value!.toBigInt();
  }

  set issuedAt(value: BigInt) {
    this.set("issuedAt", Value.fromBigInt(value));
  }

  get society(): Bytes | null {
    let value = this.get("society");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set society(value: Bytes | null) {
    if (!value) {
      this.unset("society");
    } else {
      this.set("society", Value.fromBytes(<Bytes>value));
    }
  }

  get attestation(): Bytes | null {
    let value = this.get("attestation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set attestation(value: Bytes | null) {
    if (!value) {
      this.unset("attestation");
    } else {
      this.set("attestation", Value.fromBytes(<Bytes>value));
    }
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
